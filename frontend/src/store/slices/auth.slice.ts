import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "..";
import axios from "axios";
import { User } from "../../types";

// Define the User type based on your Prisma schema

interface AuthState {
  user: User | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
}

interface LoginCredentials {
  email: string;
  password: string;
}

// Try to get auth state from localStorage for persistent login
const getInitialState = (): AuthState => {
  if (typeof window !== "undefined") {
    const storedAuth = localStorage.getItem("auth");
    if (storedAuth) {
      try {
        const parsedAuth = JSON.parse(storedAuth);
        // Make sure the data has user and token
        if (parsedAuth.user && parsedAuth.token) {
          return parsedAuth;
        }
      } catch (error) {
        console.error("Failed to parse stored auth state", error);
      }
    }
  }
  return {
    user: null,
    token: null,
    isLoading: false,
    error: null,
  };
};

const initialState: AuthState = getInitialState();

// Define the async thunk for login
export const login = createAsyncThunk(
  "auth/login",
  async (credentials: LoginCredentials, { dispatch }) => {
    dispatch(setLoading(true));
    try {
      const response = await axios.post(
        `${import.meta.env.VITE_API_URL}auth/login`,
        credentials
      );

      const { access_token, name, role, user_id } = response.data;

      const user: User = {
        id: user_id,
        name,
        role,
      };

      const token = access_token;

      console.log("Login success:", user, token);

      dispatch(setCredentials({ user, token }));

      return response.data;
    } catch (error) {
      if (axios.isAxiosError(error)) {
        const message =
          error.response?.data?.message?.message || "Login failed";
        dispatch(setError(message));
        throw error;
      } else {
        dispatch(setError("An unknown error occurred"));
        throw error;
      }
    } finally {
      dispatch(setLoading(false));
    }
  }
);

// Slice definition for auth state management
export const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setCredentials: (
      state,
      action: PayloadAction<{ user: User; token: string }>
    ) => {
      const { user, token } = action.payload;

      if (!user || !token) {
        console.warn("Invalid credentials received:", action.payload);
        return;
      }

      state.user = user;
      state.token = token;
      state.error = null;

      // Save to localStorage
      localStorage.setItem("auth", JSON.stringify({ user, token }));
      localStorage.setItem("token", token);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.isLoading = action.payload;
    },
    setError: (state, action: PayloadAction<string>) => {
      state.error = action.payload;
      state.isLoading = false; // Stop loading if error occurs
    },
    logout: (state) => {
      state.user = null;
      state.token = null;
      state.error = null;
      state.isLoading = false;

      // Remove auth data from localStorage
      localStorage.removeItem("auth");
      localStorage.removeItem("token");
    },
    clearError: (state) => {
      state.error = null;
    },
  },
});

// Export the actions generated by the slice
export const { setCredentials, setLoading, setError, logout, clearError } =
  authSlice.actions;

// Selectors to access the auth state in components
export const selectCurrentUser = (state: RootState) => state.auth.user;
export const selectAuthToken = (state: RootState) => state.auth.token;
export const selectIsAuthenticated = (state: RootState) => !!state.auth.token;
export const selectIsAdmin = (state: RootState) =>
  state.auth.user?.role === "ADMIN";
export const selectAuthLoading = (state: RootState) => state.auth.isLoading;
export const selectAuthError = (state: RootState) => state.auth.error;

// Export the reducer to be included in the store
export default authSlice.reducer;
